mean(wid)
noNA
#spatial model accounting for heteroskedasticity
expHome <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr, data=noNA, correlation = corExp(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area), method="ML")
na <- rawdata[is.na(rawdata$Price),]
my.preds2 <- predictgls(expHome, newdframe = na)
ggplot(my.preds2, aes(x = Lon, y = Lat, fill = Prediction)) +
geom_raster() +
scale_fill_distiller(palette = "Spectral", na.value = NA)
ggplot(my.preds2, aes(x = Lon, y = Lat, fill = Prediction)) +
geom_point() +
scale_color_distiller(palette = "Spectral", na.value = NA)
ggplot(my.preds2, aes(x = Lon, y = Lat, fill = Prediction)) +
geom_point() +
scale_color_distiller(color = "Spectral", na.value = NA)
ggplot(my.preds2, aes(x = Lon, y = Lat, color = Prediction)) +
geom_point() +
scale_color_distiller(palette = "Spectral", na.value = NA)
ggplot() +
geom_point(my.preds2, aes(x = Lon, y = Lat, color = Prediction)) +
scale_color_distiller(palette = "Spectral", na.value = NA) +
geom_point(data=rawdata ,mapping=aes(x=Lon, y=Lat, color=Price)) +
scale_color_distiller(palette="Spectral",na.value=NA)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align='center')
library(tidyverse)
library(ggfortify)
library(car)
library(corrplot)
library(gridExtra)
library(ggplot2)
library(GGally)
library(MASS)
library(dplyr)
library(lmtest)
library(magrittr)
library(multcomp)
library(mgcv)
library(gstat)
library(forecast)
source("predictgls.R")
source("stdres.gls.R")
library(gstat)
library(foreach)
#Predictions
#extract all rows that have missing data
missing <- rawdata[!complete.cases(rawdata), ]
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align='center')
library(tidyverse)
library(ggfortify)
library(car)
library(corrplot)
library(gridExtra)
library(ggplot2)
library(GGally)
library(MASS)
library(dplyr)
library(lmtest)
library(magrittr)
library(multcomp)
library(mgcv)
library(gstat)
library(forecast)
source("predictgls.R")
source("stdres.gls.R")
library(gstat)
library(foreach)
#read in the data
rawdata <- read.csv("HousingPrices2.csv")
#clean the data
#House.Style - combine categories with low count into an "other category"
table(rawdata$House.Style)
rawdata$House.Style[rawdata$House.Style == "1.5Unf"] <- "Other"
rawdata$House.Style[rawdata$House.Style == "2.5Fin"] <- "Other"
rawdata$House.Style[rawdata$House.Style == "2.5Unf"] <- "Other"
rawdata$House.Style[rawdata$House.Style == "SFoyer"] <- "Other"
table(rawdata$House.Style)
#Kitchen.AbvGr - there is only one house with 2 kitchens
table(rawdata$Kitchen.AbvGr)
nrow(rawdata)
#set categorical variables
rawdata$Central.Air <- factor(rawdata$Central.Air)
rawdata$House.Style <- factor(rawdata$House.Style)
#make separate dataset not containing missing values
noNA <- na.omit(rawdata)
#Above Ground Living Area vs. Price
normal <- ggplot(noNA, aes(x = Gr.Liv.Area, y = Price)) +
geom_point() +
geom_smooth(se = FALSE)  +
labs(caption = "Figure 1") +
theme(plot.caption = element_text(hjust = 0))
#Above Ground Living Area vs. Price (color = house style)
housestyle <- ggplot(noNA, aes(x = Gr.Liv.Area, y = Price, color = House.Style)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(caption = "Figure 2") +
theme(plot.caption = element_text(hjust = 0))
grid.arrange(normal, housestyle, nrow=2)
#Location vs. Price
ggplot(data=rawdata ,mapping=aes(x=Lon, y=Lat, color=Price)) +
geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
labs(caption = "Figure 3") +
theme(plot.caption = element_text(hjust = 0))
#plot a normal lm model
data.lm <- lm(Price~.-Lon-Lat-Kitchen.AbvGr, data = noNA)
#variogram of residuals
myVariogram <- variogram(object= Price ~ Gr.Liv.Area + House.Style + Year.Remod.Add + Full.Bath + Central.Air + Full.Bath + Half.Bath + Bedroom.AbvGr + Garage.Cars, locations = ~Lat+Lon, data=noNA)
plot(myVariogram)
#based on this variogram, spatial correlation is present and will need to be accounted for
#Typical Spatial Models
#exponential
baseexpHome <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr, data=noNA, correlation = corExp(form=~Lon+Lat, nugget=TRUE), method="ML")
#spherical
basesphHome <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr, data=noNA, correlation = corSpher(form=~Lon+Lat, nugget=TRUE), method="ML")
#Gaussian
basegauHome <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr, data=noNA, correlation = corGaus(form=~Lon+Lat, nugget=TRUE), method="ML")
AIC(baseexpHome)
AIC(basesphHome)
AIC(basegauHome)
#Checking assumptions for base model before accounting for heteroskedasticity
#Linearity
avPlots(data.lm, ask=FALSE)
#Independent
sres <- (stdres.gls(baseexpHome))
residDF <- data.frame(Lon = noNA$Lon, Lat = noNA$Lat, decorrResid = sres)
residVariogram <- variogram(object = decorrResid~1, locations = ~Lon+Lat, data = residDF)
plot(residVariogram)
#normality
ggplot() +
geom_histogram(mapping=aes(x=sres), bins = 30)
#equal variance
ggplot(data=noNA, mapping = aes(x=fitted(baseexpHome), y=sres)) +
geom_point() +
geom_smooth(se = FALSE)
# bptest(data.lm)
#spatial model accounting for heteroskedasticity
#exponential
expHome <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr, data=noNA, correlation = corExp(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area+Year.Remod.Add+Full.Bath+Half.Bath+Bedroom.AbvGr+Garage.Cars), method="ML")
#spherical
sphHome <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr, data=noNA, correlation = corSpher(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area+Year.Remod.Add+Full.Bath+Half.Bath+Bedroom.AbvGr+Garage.Cars), method="ML")
#Gaussian
gauHome <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr, data=noNA, correlation = corGaus(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area+Year.Remod.Add+Full.Bath+Half.Bath+Bedroom.AbvGr+Garage.Cars), method="ML")
AIC(expHome)
AIC(sphHome)
AIC(gauHome)
#spatial model accounting for heteroskedasticity
#exponential
expHome <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr, data=noNA, correlation = corExp(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area), method="ML")
#spherical
sphHome <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr, data=noNA, correlation = corSpher(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area), method="ML")
#Gaussian
gauHome <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr, data=noNA, correlation = corGaus(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area), method="ML")
AIC(expHome)
AIC(sphHome)
AIC(gauHome)
#Checking assumptions for final model
#Linearity
avPlots(data.lm, ask=FALSE)
#Independent
sres <- (stdres.gls(expHome))
residDF <- data.frame(Lon = noNA$Lon, Lat = noNA$Lat, decorrResid = sres)
residVariogram <- variogram(object = decorrResid~1, locations = ~Lon+Lat, data = residDF)
plot(residVariogram)
#normality
ggplot() +
geom_histogram(mapping=aes(x=sres), bins = 30)
#equal variance
ggplot(data=noNA, mapping = aes(x=fitted(expHome), y=sres)) +
geom_point() +
geom_smooth(se = FALSE)
# bptest(data.lm)
#1. How well do the home characteristics explain sale price?
#R^2
my.preds <-predictgls(glsobj=expHome, newdframe=noNA)
RSS <- sum((log(noNA$Price) - my.preds$Prediction)^2)
TSS <- sum((log(noNA$Price) - mean(log(noNA$Price)))^2)
RSquared <- 1 - (RSS/TSS)
RSquared
#RMSE
(sum((log(noNA$Price) - my.preds$Prediction)^2))^(1/2)
#Psuedo R^2
(cor(log(noNA$Price), my.preds$Prediction))^(1/2)
#2. What factors increase the sale price of a home?
summary(expHome)
#3. Does the variability of sale price increase with the size of the home (as given by living area)?
coef(expHome$modelStruct, unconstrained=FALSE)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align='center', fig.height = 3)
library(tidyverse)
library(ggfortify)
library(car)
library(corrplot)
library(gridExtra)
library(ggplot2)
library(GGally)
library(MASS)
library(dplyr)
library(lmtest)
library(magrittr)
library(multcomp)
library(mgcv)
library(gstat)
library(forecast)
source("predictgls.R")
source("stdres.gls.R")
library(gstat)
library(foreach)
#spatial model accounting for heteroskedasticity
#exponential
expHome <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr, data=noNA, correlation =
corExp(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area),
method="ML")
expHome2 <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr-Full.Bath-House.Style2Story-Half.Bath, data=noNA, correlation =
corExp(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area),
method="ML")
expHome2 <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr-Full.Bath-Half.Bath, data=noNA, correlation =
corExp(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area),
method="ML")
expHome2 <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr-Full.Bath-Half.Bath, data=noNA, correlation =
corExp(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area),
method="ML")
expHome3 <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr-Full.Bath-Bedroom.AbvGr-, data=noNA, correlation =
expHome3 <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr-Full.Bath-Bedroom.AbvGr, data=noNA, correlation =
corExp(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area),
method="ML")
expHome3 <- gls(model=Price~.-Lon-Lat-Kitchen.AbvGr-Full.Bath-Bedroom.AbvGr, data=noNA, correlation =
corExp(form=~Lon+Lat, nugget=TRUE), weights = varExp(form = ~Gr.Liv.Area),
method="ML")
AIC(expHome)
AIC(expHome2)
AIC(expHome3)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align='center')
library(tidyverse)
library(ggfortify)
library(car)
library(corrplot)
library(gridExtra)
library(ggplot2)
library(GGally)
library(MASS)
library(dplyr)
library(lmtest)
library(magrittr)
library(multcomp)
library(mgcv)
library(gstat)
library(forecast)
source("predictgls.R")
source("stdres.gls.R")
library(gstat)
library(foreach)
#4. What is your predicted/appraised sale price for the homes in the dataset
#that do not have a sale price?
#Predictions
#extract all rows that have missing data
missing <- rawdata[!complete.cases(rawdata), ]
#calculate predictions for missing data
my.preds <- predictgls(glsobj=expHome, newdframe=missing)
missing$Price <- my.preds$Prediction
#combine predictions with other data
full <- rbind(missing, noNA)
ggplot(data=noNA ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
ggtitle("Obesrved Data")
ggplot(data=missing ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
ggtitle("Predictions of Missing Data")
ggplot(data=full ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
ggtitle("Predicitions of Missing Data alongside Observed Data")
#4. What is your predicted/appraised sale price for the homes in the dataset
#that do not have a sale price?
#Predictions
#extract all rows that have missing data
missing <- rawdata[!complete.cases(rawdata), ]
#calculate predictions for missing data
my.preds <- predictgls(glsobj=expHome, newdframe=missing)
missing$Price <- my.preds$Prediction
#combine predictions with other data
full <- rbind(missing, noNA)
ggplot(data=noNA ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
ggtitle("Obesrved Data")
ggplot(data=missing ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
ggtitle("Predictions of Missing Data")
ggplot(data=full ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
ggtitle("Predicitions of Missing Data alongside Observed Data")
grid.arrange(pred1, pred2, pred3, nrow = 2)
#4. What is your predicted/appraised sale price for the homes in the dataset
#that do not have a sale price?
#Predictions
#extract all rows that have missing data
missing <- rawdata[!complete.cases(rawdata), ]
#calculate predictions for missing data
my.preds <- predictgls(glsobj=expHome, newdframe=missing)
missing$Price <- my.preds$Prediction
#combine predictions with other data
full <- rbind(missing, noNA)
pred1 <- ggplot(data=noNA ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
ggtitle("Obesrved Data")
pred2 <- ggplot(data=missing ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
ggtitle("Predictions of Missing Data")
pred3 <- ggplot(data=full ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
ggtitle("Predicitions of Missing Data alongside Observed Data")
grid.arrange(pred1, pred2, pred3, nrow = 2)
#4. What is your predicted/appraised sale price for the homes in the dataset
#that do not have a sale price?
#Predictions
#extract all rows that have missing data
missing <- rawdata[!complete.cases(rawdata), ]
#calculate predictions for missing data
my.preds <- predictgls(glsobj=expHome, newdframe=missing)
missing$Price <- my.preds$Prediction
#combine predictions with other data
full <- rbind(missing, noNA)
#pred1 <- ggplot(data=noNA ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
#scale_color_distiller(palette="Spectral",na.value=NA) +
#ggtitle("Obesrved Data")
pred2 <- ggplot(data=missing ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
ggtitle("Predictions of Missing Data")
pred3 <- ggplot(data=full ,mapping=aes(x=Lon, y=Lat, color=Price)) + geom_point() +
scale_color_distiller(palette="Spectral",na.value=NA) +
ggtitle("Predictions of Missing Data alongside Observed Data")
grid.arrange(pred2, pred3, nrow = 1)
#Independent
sres <- (stdres.gls(expHome))
residDF <- data.frame(Lon = noNA$Lon, Lat = noNA$Lat, decorrResid = sres)
residVariogram <- variogram(object = decorrResid~1, locations = ~Lon+Lat, data = residDF)
plot(residVariogram)
#normality
norm <- ggplot() +
geom_histogram(mapping=aes(x=sres), bins = 30)
#equal variance
var <- ggplot(data=noNA, mapping = aes(x=fitted(expHome), y=sres)) +
geom_point() +
geom_smooth(se = FALSE)
# bptest(data.lm)
grid.arrange(norm, var, nrow = 1)
#Independent
sres <- (stdres.gls(expHome))
residDF <- data.frame(Lon = noNA$Lon, Lat = noNA$Lat, decorrResid = sres)
residVariogram <- variogram(object = decorrResid~1, locations = ~Lon+Lat, data = residDF)  +
labs(caption = "Figure 4") +
theme(plot.caption = element_text(hjust = 0))
install.packages("patchwork")
## Libraries
library(tidyverse)
library(vroom)
## Read in the Data
bike <- vroom("./train.csv")
setwd("/Users/maddieportrey/Desktop/code/STAT 348/KaggleBikeShare")
## Read in the Data
bike <- vroom("./train.csv")
## EDA
skimr::skim(bike)
## EDA
install.packages("skimr")
## EDA
skimr::skim(bike)
View(bike)
## EDA
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
## Read in the Data
bike <- vroom("./train.csv")
## EDA
bike <- bike %>%
mutate_at(c("season","holiday","workingday","weather"), factor)
class(bike$datetime)
ggplot() +
geom_point(data = bike, aes(x = temp, y = count))
ggplot() +
geom_boxplot(data = bike, aes(x = season, y = count))
ggplot() +
geom_boxplot(bike, aes(x = holiday, y = count))
ggplot() +
geom_boxplot(data = bike, aes(x = holiday, y = count))
ggplot() +
geom_boxplot(data = bike, aes(x = weather, y = count))
ggplot(data = bike, aes(x = humidity, y = count)) +
geom_point() +
geom_smooth()
ggplot(data = bike, aes(x = humidity, y = count)) +
#geom_point() +
geom_smooth()
ggplot(data = bike, aes(x = humidity, y = count)) +
#geom_point() +
geom_smooth(loess = FALSE)
ggplot(data = bike, aes(x = humidity, y = count)) +
geom_point() +
geom_smooth()
plot_correlation(bike)
library(DataExplorer)
plot_correlation(bike)
plot_intro(bike)
plot_bar(bike)
bike <- subset(bike, select = -c(datetime, casual, registered, atemp))
plot_bar(bike)
bike <- subset(bike, select = -c(datetime, casual, registered, atemp, holiday))
## Read in the Data
bike <- vroom("./train.csv")
## EDA
#make columns factors not numeric
bike <- bike %>%
mutate_at(c("season","holiday","workingday","weather"), factor)
bike <- subset(bike, select = -c(datetime, casual, registered, atemp, holiday))
plot_bar(bike)
plot_correlation(bike)
ggplot(data = bike, aes(x = temp, y = count)) +
geom_point() +
geom_smooth()
plot_histogram(bike)
plot_correlation(bike)
season_plot <- ggplot() +
geom_boxplot(data = bike, aes(x = season, y = count))
View(season_plot)
season_plot
season_plot <- ggplot() +
geom_boxplot(data = bike, aes(x = season, y = count)) +
labs(title = "Seasonal Bike Count")
season_plot
season_plot <- ggplot() +
geom_boxplot(data = bike, aes(x = season, y = count)) +
ggtitle("Seasonal Bike Count")
season_plot
plot_missing(bike)
## Read in the Data
bike <- vroom("./train.csv")
## EDA
#make columns factors not numeric
bike <- bike %>%
mutate_at(c("season","holiday","workingday","weather"), factor)
plot_missing(bike)
bike <- subset(bike, select = -c(datetime, casual, registered, atemp, holiday))
plot_correlation(bike)
plot_bar(bike)
ggplot() +
geom_boxplot(data = bike, aes(x = weather, y = count))
ggplot() +
geom_boxplot(data = bike, aes(x = weather, y = count)) +
ggtitle("Bike Count by Types of Weather")
ggplot(data = bike, aes(x = temp, y = count)) +
geom_density()
ggplot(data = bike, aes(x = temp, y = count)) +
geom_smooth()
ggplot(data = bike, aes(x = temp, y = count)) +
geom_smooth(se = FALSE)
plot_correlation(bike)
ggplot(data = bike, aes(x = humidity, y = count)) +
geom_smooth(se = FALSE) +
ggtitle("Bike Count by Humidity")
humid_plot <- ggplot(data = bike, aes(x = humidity, y = count)) +
geom_smooth(se = FALSE) +
ggtitle("Bike Count by Humidity")
## Libraries
library(tidyverse)
library(vroom)
library(patchwork)
library(DataExplorer)
## Read in the Data
bike <- vroom("./train.csv")
## EDA
#make columns factors not numeric
bike <- bike %>%
mutate_at(c("season","holiday","workingday","weather"), factor)
bike <- subset(bike, select = -c(datetime, casual, registered, atemp, holiday))
plot_correlation(bike)
plot_bar(bike)
season_plot <- ggplot() +
geom_boxplot(data = bike, aes(x = season, y = count)) +
ggtitle("Seasonal Bike Count")
weather_plot <- ggplot() +
geom_boxplot(data = bike, aes(x = weather, y = count)) +
ggtitle("Bike Count by Types of Weather")
temp_plot <- ggplot(data = bike, aes(x = temp, y = count)) +
geom_smooth(se = FALSE) +
ggtitle("Bike Count by Temperature")
humid_plot <- ggplot(data = bike, aes(x = humidity, y = count)) +
geom_smooth(se = FALSE) +
ggtitle("Bike Count by Humidity")
(season_plot + weather_plot) / (temp_plot + humid_plot)
humid_plot <- ggplot(data = bike, aes(x = humidity, y = count)) +
geom_point
humid_plot <- ggplot(data = bike, aes(x = humidity, y = count)) +
geom_point() +
geom_smooth(se = FALSE) +
ggtitle("Bike Count by Humidity")
humid_plot
ggsave("4plotsEDA", (season_plot + weather_plot) / (temp_plot + humid_plot))
ggsave("4plotsEDA.png", (season_plot + weather_plot) / (temp_plot + humid_plot))
weather_plot <- ggplot() +
geom_boxplot(data = bike, aes(x = weather, y = count)) +
ggtitle("Bike Count by Weather Type")
season_plot <- ggplot() +
geom_boxplot(data = bike, aes(x = season, y = count)) +
ggtitle("Seasonal Bike Count")
weather_plot <- ggplot() +
geom_boxplot(data = bike, aes(x = weather, y = count)) +
ggtitle("Bike Count by Weather Type")
temp_plot <- ggplot(data = bike, aes(x = temp, y = count)) +
geom_smooth(se = FALSE) +
ggtitle("Bike Count by Temperature")
humid_plot <- ggplot(data = bike, aes(x = humidity, y = count)) +
geom_smooth(se = FALSE) +
ggtitle("Bike Count by Humidity")
ggsave("4plotsEDA.png", (season_plot + weather_plot) / (temp_plot + humid_plot))
(season_plot + weather_plot) / (temp_plot + humid_plot)
